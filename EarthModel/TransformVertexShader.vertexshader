#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;


// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 origin_world;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 Normals_in_cameraspace;
out vec3 vertexPosition_cameraspace;


// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 View;
uniform mat4 Model;
//uniform vec3 LightPosition_worldspace;



void main(){


gl_Position =  MVP * vec4(vertexPosition_modelspace,1);


// Position of the vertex, in worldspace : M * position
Position_worldspace = (Model * vec4(vertexPosition_modelspace,1)).xyz;

// Vector that goes from the vertex to the camera, in camera space.
// In camera space, the camera is at the origin (0,0,0).
vec3 vertexPosition_cameraspace = (   View*Model * vec4(vertexPosition_modelspace,1)).xyz;
EyeDirection_cameraspace = vec3(0.0) - vertexPosition_cameraspace;


//Origin in cameraspace
vec3 originPosition_cameraspace = (  View* Model *vec4(vertexNormal_modelspace,1)).xyz;
vec3 Eyeorigin_cameraspace = vec3(0) - originPosition_cameraspace;

Normals_in_cameraspace = EyeDirection_cameraspace + originPosition_cameraspace;

//Send Light co-ordinates frome here rather than from main
vec3 LightPosition_worldspace = vec3(5.6, 2, 2);

// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
vec3 LightPosition_cameraspace = ( View*Model* vec4(LightPosition_worldspace,1)).xyz;
LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;


// Normal of the the vertex, in camera space
Normal_cameraspace = vec3((View* vec4(Normals_in_cameraspace,0)).xyz);


	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

